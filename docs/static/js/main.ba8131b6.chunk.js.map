{"version":3,"sources":["giftExpert/giftAdd/index.js","giftExpert/giftGrid/items.js","api/fetchGifs.js","giftExpert/giftGrid/index.js","giftExpert/index.js","App.js","serviceWorker.js","index.js"],"names":["GiftAdd","onChangeCategory","useState","inputValue","setInputValue","show","setShow","Alert","variant","onClose","dismissible","hidden","Heading","Form","Group","controlId","Label","Control","type","placeholder","onChange","e","target","value","Button","bg","onClick","preventDefault","trim","length","GridItems","gif","id","title","img","Col","md","Card","Img","src","Body","Title","as","fetchGifs","category","a","url","encodeURI","fetch","response","json","respJson","data","gifs","map","x","images","downsized_medium","GiftGrid","setImages","useEffect","then","Container","Row","className","k","key","GiftExpert","categories","setCategories","App","Navbar","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0SAsCeA,EA/BC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,iBAAsB,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,OAEZF,oBAAS,GAFG,mBAE7BG,EAF6B,KAEvBC,EAFuB,KAepC,OACI,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,SAASC,QAAU,kBAAOH,GAAQ,IAASI,aAAW,EAACC,OAAQN,GAC1E,kBAACE,EAAA,EAAMK,QAAP,wCACA,2DAEJ,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,eAClB,kBAACF,EAAA,EAAKG,MAAN,0BACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,+BAA+BC,SAAW,SAACC,GAAD,OAASjB,EAAciB,EAAEC,OAAOC,QAAUA,MAAQpB,KAE1I,kBAACqB,EAAA,EAAD,CAAQC,GAAG,OAAOC,QArBG,SAACL,GAC1BA,EAAEM,iBACCxB,EAAWyB,OAAOC,OAAS,GAC1BzB,EAAc,IACdH,EAAiBE,IAEjBG,GAAQ,KAeR,c,wBCZGwB,EAhBG,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACVC,EAAkBD,EAAlBC,GAAIC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,IAClB,OACI,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAML,GAAE,kBAAaA,IACrB,kBAACK,EAAA,EAAKC,IAAN,CAAU9B,QAAQ,MAAM+B,IAAKL,IAC7B,kBAACG,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,CAAYC,GAAG,MAAOT,Q,iCCZ7BU,EAAS,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACXC,EADW,0FAC+EC,UAAUH,GADzF,UAC6G,GAD7G,SAEMI,MAAMF,GAFZ,cAEXG,EAFW,gBAGMA,EAASC,OAHf,cAGXC,EAHW,OAITC,EAASD,EAATC,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHvB,GAAKuB,EAAEvB,GACPC,MAAOsB,EAAEtB,MACTC,IAAG,UAAGqB,EAAEC,cAAL,aAAG,EAAUC,iBAAiBX,QATxB,kBAYVO,GAZU,4CAAH,sDCuCPK,EAjCE,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAAc,EACD1C,mBAAS,IADR,mBACtBsD,EADsB,KACdG,EADc,KAQ7B,OALAC,qBAAW,WACPjB,EAAUC,GAAUiB,KAAMF,KAC3B,CAAEf,IAID,kBAAC,WAAD,KACI,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC5B,EAAA,EAAD,CAAKC,GAAG,KAAM4B,UAAU,sDACpB,4BAAMpB,GACN,kBAACmB,EAAA,EAAD,KAEIP,GACIA,EAAOF,KAAK,SAACC,EAAGU,GACZ,OACY,kBAAC,EAAD,CAAWC,IAAMD,EAAIlC,IAAMwB,aCL5DY,EAjBI,WAAO,IAAD,EAEejE,mBAAS,CAAC,cAFzB,mBAEdkE,EAFc,KAEFC,EAFE,KAOrB,OACI,kBAAC,WAAD,KACA,kBAAC,EAAD,CAASpE,iBANkB,SAACoB,GAC5BgD,EAAc,CAAChD,GAAF,mBAAQ+C,QAMjB,wBAAIJ,UAAU,QACRI,EAAWd,KAAK,SAACC,EAAGU,GAAJ,OAAU,kBAAC,EAAD,CAAUC,IAAMX,EAAIX,SAAWW,UCK5De,MAbf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAA,EAAD,CAAQ9C,GAAG,OAAOuC,UAAU,OAC1B,kBAACO,EAAA,EAAOC,MAAR,CAAcC,KAAK,QAAQT,UAAU,cAArC,eAEF,kBAACF,EAAA,EAAD,CAAWE,UAAU,QACnB,kBAAC,EAAD,SCFYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba8131b6.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Form, \r\n    Button, \r\n    Alert } from 'react-bootstrap';\r\n\r\nconst GiftAdd = ({onChangeCategory}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [show, setShow] = useState(true);\r\n\r\n\r\n    const handleCategorySubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setInputValue('');\r\n            onChangeCategory(inputValue);\r\n        }else{ \r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Alert variant=\"danger\" onClose={ () => (setShow(true)) } dismissible hidden={show}>\r\n                <Alert.Heading>Error al almacenar la categoria</Alert.Heading>\r\n                <p> Agrega un valor correcto  </p>\r\n            </Alert>\r\n            <Form>\r\n                <Form.Group controlId=\"id-category\">\r\n                    <Form.Label>Agregar categoria</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Cual es la nueva categoria ?\" onChange={ (e) => ( setInputValue(e.target.value)) } value={ inputValue }/>\r\n                </Form.Group>\r\n            <Button bg=\"bark\" onClick={ handleCategorySubmit }>Agregar</Button>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default GiftAdd;\r\nGiftAdd.propTypes = {\r\n    onChangeCategory: PropTypes.func.isRequired\r\n}","import React, { Fragment } from 'react';\r\nimport { Card, Col } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GridItems = ({ gif }) => {\r\n    const {id, title, img} = gif;\r\n    return (\r\n        <Fragment>\r\n            <Col md=\"3\">\r\n                <Card id={`id-card-${id}`}>\r\n                <Card.Img variant=\"top\" src={img} />\r\n                <Card.Body>\r\n                    <Card.Title as=\"h6\">{ title }</Card.Title>\r\n                </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Fragment>\r\n    )\r\n\r\n};\r\nexport default GridItems;\r\nGridItems.propTypes = {\r\n    gif: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        img: PropTypes.string.isRequired\r\n    })\r\n}\r\n","\r\nexport const fetchGifs = async (category) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=s9cgu35D9q6O0a0tuUSx9bNW5oRcFZUt&q=${ encodeURI(category) }&limit=${5}`;\r\n        const response = await fetch(url);\r\n        const respJson = await response.json();\r\n        const { data } = respJson;\r\n        const gifs = data.map( x =>  {  \r\n            return {\r\n                id : x.id,\r\n                title: x.title,\r\n                img : x.images?.downsized_medium.url\r\n            }\r\n        }) \r\n        return gifs\r\n}","import React, { useEffect, useState, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport GridItems from './items';\r\nimport './index.css';\r\nimport { fetchGifs } from '../../api/fetchGifs';\r\n\r\nconst GiftGrid = ({category}) => {\r\n    const [images, setImages] = useState([]);\r\n\r\n    useEffect( () => {\r\n        fetchGifs(category).then( setImages );\r\n    }, [ category ]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Container>\r\n                <Row>   \r\n                    <Col md=\"12\"  className=\"content-category animate__animated animate__fadeIn\" >\r\n                        <h3>{ category }</h3>\r\n                        <Row>\r\n                        {\r\n                            images &&\r\n                                images.map( (x, k) => {\r\n                                    return (\r\n                                                <GridItems key={ k } gif={ x } />\r\n                                    )\r\n                                })\r\n                        }\r\n                        </Row>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Container> \r\n        </Fragment>\r\n\r\n\r\n    )\r\n}\r\nexport default GiftGrid;\r\nGiftGrid.propTypes = {\r\n    category : PropTypes.string.isRequired\r\n}","import React, { useState, Fragment } from 'react';\r\nimport GiftAdd from './giftAdd';\r\nimport GiftGrid from './giftGrid';\r\n\r\nconst GiftExpert = () => {\r\n\r\n    const [categories, setCategories] = useState([\"One punch\"]);\r\n    const onHandleCategoryChange = (e) => {\r\n        setCategories([e, ...categories ]);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n        <GiftAdd onChangeCategory={ onHandleCategoryChange }/>\r\n            <ol className=\"mt-3\">\r\n                { categories.map( (x, k) => <GiftGrid key={ x } category={ x } />) }\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\nexport default GiftExpert;","import React, { Fragment } from 'react';\n\n/** Componentes bootstrap */\nimport {Navbar, Container} from 'react-bootstrap';\n\n/** Componentes */\nimport GiftExpert from './giftExpert';\nfunction App() {\n  return (\n    <Fragment>\n      <Navbar bg=\"dark\" className=\"p-3\"> \n        <Navbar.Brand href=\"#home\" className=\"text-light\">Brand link</Navbar.Brand>\n      </Navbar>\n      <Container className=\"mt-4\">\n        <GiftExpert/>\n      </Container>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}